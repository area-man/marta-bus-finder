install.packages("ggthemes")
library(ggplot2)
library(ggalt)
library(ggiraph)
library(ggthemes)
library(viridis)
library(stringi)
install.packages("viridis")
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimes$onclick <- sprintf(
"function() {window.open('%s%s')}",
"http://en.wikipedia.org/wiki/",
as.character(crimes$state)
)
max_bar <- max(crimes$Murder, crimes$Assault, crimes$Rape)
crimes$tip <- sprintf('
<div class="tipchart">
<h4>%s</h4>
<span class="tipspanstyle">Arrests per crime per 100K</span>
<table>
<tr class="tiprow">
<td class="tipbarticks">Murder</td>
<td class="tipbardiv"><div class="tipbar" style="width:%dpx;">%3.1f</div></td>
</tr>
<tr class="tiprow">
<td class="tipbarticks">Rape</td>
<td class="tipbardiv"><div class="tipbar" style="width:%dpx;">%3.1f</div></td>
</tr>
<tr class="tiprow">
<td class="tipbarticks">Assault</td>
<td class="tipbardiv"><div class="tipbar" style="width %dpx;">%3.1f</div></td>
</tr>
</table>
</div>',
stri_trans_totitle(crimes$state),
round((crimes$Murder/(max_bar/1.25)*100)), crimes$Murder,
round((crimes$Rape/(max_bar/1.25)*100)), crimes$Rape,
round((crimes$Assault/(max_bar/1.25)*100)), crimes$Assault)
# javascript is too dumb to deal with line breaks in strings well
crimes$tip <- gsub("\\\n", "", crimes$tip)
states_map <- map_data("state")
gg <- ggplot()
gg <- gg + geom_map_interactive(
map=states_map, data=crimes,
aes(fill=Murder, tooltip=tip, onclick=onclick, use_jquery=TRUE,
data_id=state, map_id=state),
color="white", size=0.15)
gg <- gg + scale_fill_viridis(name="Murder arrest rate \n(per 100K) ")
gg <- gg + coord_proj("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96")
gg <- gg + ggtitle("US Arrests (1973)")
gg <- gg + expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + theme_map(base_family="Helvetica")
gg <- gg + theme(legend.position="bottom")
gg <- gg + theme(plot.title=element_text(hjust=0.5, size=24, family="Helvetica"))
gg <- gg + theme(legend.title=element_text(family="Helvetica"))
gg <- gg + theme(legend.title.align=1)
ggiraph(code = {print(gg)}, width = 10, height = 6)
install.packages("viridis")
library(viridis)
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimes$onclick <- sprintf(
"function() {window.open('%s%s')}",
"http://en.wikipedia.org/wiki/",
as.character(crimes$state)
)
max_bar <- max(crimes$Murder, crimes$Assault, crimes$Rape)
crimes$tip <- sprintf('
<div class="tipchart">
<h4>%s</h4>
<span class="tipspanstyle">Arrests per crime per 100K</span>
<table>
<tr class="tiprow">
<td class="tipbarticks">Murder</td>
<td class="tipbardiv"><div class="tipbar" style="width:%dpx;">%3.1f</div></td>
</tr>
<tr class="tiprow">
<td class="tipbarticks">Rape</td>
<td class="tipbardiv"><div class="tipbar" style="width:%dpx;">%3.1f</div></td>
</tr>
<tr class="tiprow">
<td class="tipbarticks">Assault</td>
<td class="tipbardiv"><div class="tipbar" style="width %dpx;">%3.1f</div></td>
</tr>
</table>
</div>',
stri_trans_totitle(crimes$state),
round((crimes$Murder/(max_bar/1.25)*100)), crimes$Murder,
round((crimes$Rape/(max_bar/1.25)*100)), crimes$Rape,
round((crimes$Assault/(max_bar/1.25)*100)), crimes$Assault)
# javascript is too dumb to deal with line breaks in strings well
crimes$tip <- gsub("\\\n", "", crimes$tip)
states_map <- map_data("state")
gg <- ggplot()
gg <- gg + geom_map_interactive(
map=states_map, data=crimes,
aes(fill=Murder, tooltip=tip, onclick=onclick, use_jquery=TRUE,
data_id=state, map_id=state),
color="white", size=0.15)
gg <- gg + scale_fill_viridis(name="Murder arrest rate \n(per 100K) ")
gg <- gg + coord_proj("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96")
gg <- gg + ggtitle("US Arrests (1973)")
gg <- gg + expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + theme_map(base_family="Helvetica")
gg <- gg + theme(legend.position="bottom")
gg <- gg + theme(plot.title=element_text(hjust=0.5, size=24, family="Helvetica"))
gg <- gg + theme(legend.title=element_text(family="Helvetica"))
gg <- gg + theme(legend.title.align=1)
ggiraph(code = {print(gg)}, width = 10, height = 6)
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimes$onclick <- sprintf(
"function() {window.open('%s%s')}",
"http://en.wikipedia.org/wiki/",
as.character(crimes$state)
)
max_bar <- max(crimes$Murder, crimes$Assault, crimes$Rape)
crimes$tip <- sprintf('
<div class="tipchart">
<h4>%s</h4>
<span class="tipspanstyle">Arrests per crime per 100K</span>
<table>
<tr class="tiprow">
<td class="tipbarticks">Murder</td>
<td class="tipbardiv"><div class="tipbar" style="width:%dpx;">%3.1f</div></td>
</tr>
<tr class="tiprow">
<td class="tipbarticks">Rape</td>
<td class="tipbardiv"><div class="tipbar" style="width:%dpx;">%3.1f</div></td>
</tr>
<tr class="tiprow">
<td class="tipbarticks">Assault</td>
<td class="tipbardiv"><div class="tipbar" style="width %dpx;">%3.1f</div></td>
</tr>
</table>
</div>',
stri_trans_totitle(crimes$state),
round((crimes$Murder/(max_bar/1.25)*100)), crimes$Murder,
round((crimes$Rape/(max_bar/1.25)*100)), crimes$Rape,
round((crimes$Assault/(max_bar/1.25)*100)), crimes$Assault)
# javascript is too dumb to deal with line breaks in strings well
crimes$tip <- gsub("\\\n", "", crimes$tip)
states_map <- map_data("state")
gg <- ggplot()
gg <- gg + geom_map_interactive(
map=states_map, data=crimes,
aes(fill=Murder, tooltip=tip, onclick=gsub("'","",onclick), use_jquery=TRUE,
data_id=state, map_id=state),
color="white", size=0.15)
gg <- gg + scale_fill_viridis(name="Murder arrest rate \n(per 100K) ")
gg <- gg + coord_proj("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96")
gg <- gg + ggtitle("US Arrests (1973)")
gg <- gg + expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + theme_map(base_family="Helvetica")
gg <- gg + theme(legend.position="bottom")
gg <- gg + theme(plot.title=element_text(hjust=0.5, size=24, family="Helvetica"))
gg <- gg + theme(legend.title=element_text(family="Helvetica"))
gg <- gg + theme(legend.title.align=1)
ggiraph(code = {print(gg)}, width = 10, height = 6)
ggiraph(code = {print(gg)})
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimes$onclick <- sprintf(
"function() {window.open('%s%s')}",
"http://en.wikipedia.org/wiki/",
as.character(crimes$state)
)
max_bar <- max(crimes$Murder, crimes$Assault, crimes$Rape)
max_bar
crimes$tip <- sprintf('
<div class="tipchart">
<h4>%s</h4>
<span class="tipspanstyle">Arrests per crime per 100K</span>
<table>
<tr class="tiprow">
<td class="tipbarticks">Murder</td>
<td class="tipbardiv"><div class="tipbar" style="width:%dpx;">%3.1f</div></td>
</tr>
<tr class="tiprow">
<td class="tipbarticks">Rape</td>
<td class="tipbardiv"><div class="tipbar" style="width:%dpx;">%3.1f</div></td>
</tr>
<tr class="tiprow">
<td class="tipbarticks">Assault</td>
<td class="tipbardiv"><div class="tipbar" style="width %dpx;">%3.1f</div></td>
</tr>
</table>
</div>',
stri_trans_totitle(crimes$state),
round((crimes$Murder/(max_bar/1.25)*100)), crimes$Murder,
round((crimes$Rape/(max_bar/1.25)*100)), crimes$Rape,
round((crimes$Assault/(max_bar/1.25)*100)), crimes$Assault)
# javascript is too dumb to deal with line breaks in strings well
crimes$tip <- gsub("\\\n", "", crimes$tip)
states_map <- map_data("state")
gg <- ggplot()
gg <- gg + geom_map_interactive(
map=states_map, data=crimes,
aes(fill=Murder, tooltip=tip, onclick=gsub("'","",onclick), use_jquery=TRUE,
data_id=state, map_id=state),
color="white", size=0.15)
gg <- gg + scale_fill_viridis(name="Murder arrest rate \n(per 100K) ")
gg <- gg + coord_proj("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96")
gg <- gg + ggtitle("US Arrests (1973)")
gg <- gg + expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + theme_map(base_family="Helvetica")
gg <- gg + theme(legend.position="bottom")
gg <- gg + theme(plot.title=element_text(hjust=0.5, size=24, family="Helvetica"))
gg <- gg + theme(legend.title=element_text(family="Helvetica"))
gg <- gg + theme(legend.title.align=1)
ggiraph(code = {print(gg)}, width = 10, height = 6)
require(sp)
require(rgeos)
pts <- SpatialPoints(cbind(c(1, 1, 3), c(1, 2, 3)))
b <- gBuffer(pts, width=0.6)
over(pts, b)
###########################################################
# explodes slots into individual polygons
polys <- b@polygons[[1]]@Polygons
pl <- vector("list", length(polys))
for (i in 1:length(polys)) { pl[i] <- Polygons(list(polys[[i]]), i) }
b.spolys <- SpatialPolygons(pl)
row.ids=sapply(slot(b.spolys, "polygons"), function(i) slot(i, "ID"))
b <- SpatialPolygonsDataFrame(b.spolys, data.frame(FID=as.numeric(row.ids)) )
###########################################################
over(pts, b)
library(ggplot2)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
# Calculate correlation for each group
cors <- ddply(mtcars, c("vs", "am"), summarise, cor = round(cor(mpg, wt), 2))
p + facet_grid(vs ~ am) +
geom_text(data=cors, aes(label=paste("r=", cor, sep="")), x=30, y=4)
library(ddply)
install.packages("ddply")
install.packages("ddplyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
cors <- ddply(mtcars, c("vs", "am"), summarise, cor = round(cor(mpg, wt), 2))
library(plyr)
install.packages("plyr")
library(plyr)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
cors <- ddply(mtcars, c("vs", "am"), summarise, cor = round(cor(mpg, wt), 2))
library(ggplot2)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
cors <- ddply(mtcars, c("vs", "am"), summarise, cor = round(cor(mpg, wt), 2))
p + facet_grid(vs ~ am) +
geom_text(data=cors, aes(label=paste("r=", cor, sep="")), x=30, y=4)
ggplot(mtcars, aes(mpg, wt)) +
geom_smooth(method = "loess", colour = "red", fill = "red") +
geom_smooth(method = "lm", colour = "blue", fill = "blue") +
geom_point() + facet_grid(vs ~ am, margins=TRUE)
library(ggiraph)
?geom_smooth_interactive
geom_smooth_interactive
??interactive
?buttonInput
library(shiny)
?buttonInput
?sliderInput
library(jsonlite)
?fromJSON
marta_bus_route_url <- "http://developer.itsmarta.com/BRDRestService/RestBusRealTimeService/GetBusByRoute/74"
transit_records <- fromJSON(marta_bus_route_url, flatten=TRUE), silent=TRUE
transit_records <- fromJSON(marta_bus_route_url, flatten=TRUE), silent=TRUE)
transit_records <- fromJSON(marta_bus_route_url, flatten=TRUE)
transit_records
?addCircles
library(leaflet)
?addCircles
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
?leafletOutput
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
actionButton
?actionButton
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear"))
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
?leafletProxy
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
library(shiny)
?dataTableOutput
library(shiny); print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
marta_bus_url <- "http://developer.itsmarta.com/BRDRestService/BRDRestService.svc/GetAllBus"
transit_records <- fromJSON(marta_bus_url, flatten=TRUE)
head(transit_records)
unique(transit_records$ROUTE)
order(unique(transit_records$ROUTE))
foo <- unique(transit_records$ROUTE)
as.integer(foo)
order(as.integer(foo))
foo[order(as.integer(foo))]
as.integer(foo[order(as.integer(foo))])
foo <- foo[order(as.integer(foo))]
foo
paste(foo, collapse = ",")
paste("\"",foo,"\"", collapse = ",")
paste("'",foo,"'", collapse = ",")
paste("'",foo,"'", collapse = ",", sep = "")
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
list("Choice 1" = 1, "Choice 2" = 2, "Choice 3" = 3)
marta_bus_route_list <- c("1","2","3","4","5","6","8","9","12","13","15","16","19","21","24","25","26","27","30","32","34","36","39","42","47","49","50","51","53","55","56","58","60","66","67","68","71","73","74","75","78","79","82","83","84","85","86","87","89","93","95","99","102","103","107","109","110","111","115","116","117","119","120","121","123","124","125","126","132","140","141","150","153","155","162","165","170","172","178","180","181","183","186","189","191","193","194","195","196","823")
?selectInput
list(as.integer(marta_bus_route_list))
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
?h2
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
absolutePanel
?absolutePanel
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
?selectInput
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
library(shiny); print(source('C:/Users/anthony/Desktop/marta-analysis/leaflet_bus_refresher.R')$value)
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
shiny::runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
library(leaflet)
?labelOptions
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
labelOptions()
labelOptions$direction
labelOptions
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
addCircleMarkers
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
shiny::runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?addMarkers
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?clearMarkers
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?clearMarkers
library(leaflet)
?clearMarkers
?addMarkers
?clearMarkers
shiny::runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?addMarkers
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?markerOptions
?addMarkers
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
library(shiny)
library(leaflet)
library(jsonlite)
marta_bus_url <- "http://developer.itsmarta.com/BRDRestService/BRDRestService.svc/GetAllBus"
transit_records <- unique((jsonlite:::fromJSON(marta_bus_route_url_string, flatten=TRUE))$ROUTE)
transit_records <- unique((jsonlite:::fromJSON(marta_bus_url, flatten=TRUE))$ROUTE)
transit_records
transit_records <- c(unique((jsonlite:::fromJSON(marta_bus_url, flatten=TRUE))$ROUTE))
transit_records
paste(transit_records, collapse = ",")
paste(transit_records, collapse = "\",\"")
length(transit_records)
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?addMarkers
?markerOptions
?iconOptions
??iconUrl
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
marta_bus_route_list <- c("1","2","3","4","5","6","8","9","12","13","15","16","19","21","24","25","26","27","30","32","34","36","39","42","47","49","50","51","53","55","56","58","60","66","67","68","71","73","74","75","78","79","82","83","84","85","86","87","89","93","95","99","102","103","107","109","110","111","115","116","117","119","120","121","123","124","125","126","132","140","141","150","153","155","162","165","170","172","178","180","181","183","186","189","191","193","194","195","196","823")
length(marta_bus_route_list)
shiny::runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
shapes <- read.csv("google_transit/shapes.txt", stringsAsFactors = FALSE)
routes <- read.csv("google_transit/routes.txt", stringsAsFactors = FALSE)
trips <- read.csv("google_transit/trips.txt", stringsAsFactors = FALSE)
setwd("//apollo/Personal/Anthony/Source/marta-bus-finder")
shapes <- read.csv("google_transit/shapes.txt", stringsAsFactors = FALSE)
routes <- read.csv("google_transit/routes.txt", stringsAsFactors = FALSE)
trips <- read.csv("google_transit/trips.txt", stringsAsFactors = FALSE)
route_points <- merge(routes, trips)
write_route_coordinates_to_csv_file <- function(route_identifier) {
route_points <- route_points[route_points$route_short_name == route_identifier, ]
route_points <- shapes[shapes$shape_id %in% unique(route_points$shape_id)[1], ] # select only one geometry/"shape_id" per route
route_points <- route_points[order(route_points[, "shape_id"], route_points[, "shape_pt_sequence"]), ]
route_points <- route_points[, c("shape_pt_lon", "shape_pt_lat")]
colnames(route_points) <- c("longitude", "latitude")
write.csv(route_points, paste0("routes/", route_identifier, ".csv"), row.names = FALSE)
}
route_identifiers <- unique(routes$route_short_name)
for(route_identifier in route_identifiers[1]) {
write_route_coordinates_to_csv_file(route_identifier)
}
route_identifiers <- unique(routes$route_short_name)
for(route_identifier in route_identifiers) {
write_route_coordinates_to_csv_file(route_identifier)
}
routes <- merge(routes, trips)
write_route_coordinates_to_csv_file <- function(route_identifier) {
route_points <- routes[routes$route_short_name == route_identifier, ]
route_points <- shapes[shapes$shape_id %in% unique(route_points$shape_id)[1], ] # select only one geometry/"shape_id" per route
route_points <- route_points[order(route_points[, "shape_id"], route_points[, "shape_pt_sequence"]), ]
route_points <- route_points[, c("shape_pt_lon", "shape_pt_lat")]
colnames(route_points) <- c("longitude", "latitude")
write.csv(route_points, paste0("routes/", route_identifier, ".csv"), row.names = FALSE)
}
route_identifiers <- unique(routes$route_short_name)
for(route_identifier in route_identifiers) {
write_route_coordinates_to_csv_file(route_identifier)
}
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?addAwesomeMarkers
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
if (!require('devtools')) install.packages('devtools')
devtools::install_github('rstudio/leaflet')
install.packages("digest")
install.packages("digest")
if (!require('devtools')) install.packages('devtools')
devtools::install_github('rstudio/leaflet')
shiny::runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
foo <- "hi"
rep(foo, 2)
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?fitBounds
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?addPolylines
?pathOptions
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
runApp('//apollo/Personal/Anthony/Source/marta-bus-finder')
?observeEvent
